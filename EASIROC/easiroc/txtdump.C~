/* ---------64channels read out system____y_d2r.cc(dat to root)---------- */
//このファイルで、root変換すると、ターミナル場で正しいchに反映される。

void ii_d2r(char *filename, char *outname){
  gROOT->SetStyle("Plain");
  
  std::ifstream hoge(filename,std::ios::binary);
  if(!hoge.is_open()){
    cout << "no file" << endl;
    return;
  }

  TH1F *hist[64];
  TH2F* chhist = new TH2F("chhist","",64,0-0.5,64-0.5,1500,500,2000);//ADC vs ch ここでもうだいたい完了

  /* build tree(all new) */
  float ch[64] = {0.}; //初期値を詰める、chがtreeのブランチ
  TTree* treeMPPC = new TTree("treeMPPC", "Light yield from MPPC");  //([i]TTreeインスタンスの準備)
  treeMPPC->Branch("ch",     ch        ,    "ch[64]/F"); //([ii]Branchの設定)
  
  /* create histgrams(no change) */

  for(int i = 0; i<64; ++i){
    std::ostringstream _name;
    _name << "ch" << i;
    std::string hist_name = _name.str();
    hist[i] = new TH1F(hist_name.c_str(), hist_name.c_str(), 4096, 0, 4096);
  }
  
  /* fill data to histgrams(i)(std <-no,ch[i] ->new,tree ->new) */

  while(!hoge.eof()){
    // unsigned int val;
    UInt_t val;
    hoge.read((char*)&val, sizeof(int));
    //    std::cout << std::hex << val << std::endl;
    
    if(val == 0xffffea0c){
      //このvalで0xffffa0cを捕まえて、if文の中に入る。
      //std::cout << "change2root" << std::endl;
      //std::cout << "" << std::endl;
      hoge.read((char*)&val, sizeof(int));
      for(int i = 0; i<65; ++i){
 	hoge.read((char*)&val, sizeof(int));
	if(i>0){
	  //int buffer = val & 0xffff;
	  UInt_t buffer = val & 0xffff;
	  hist[i-1]->Fill(buffer);//ch[i]を詰め込んでいる
	  chhist->Fill(i-1,buffer);//adcVSchを詰め込んでいる
	  ch[i-1] = buffer; //buffer(値)をchに詰め込む
	}
      }
      // std::cout << ch[64] << std::endl;//チェック用
      //std::cout << "val:" << val << std::endl;//チェック用
      //std::cout << "buffer:" << buffer << std::endl;//チェック用 
      treeMPPC->Fill(); //([iii]書き込み)
    }
  }

  /* fill data to histgrams(ii)(all new) */

  TFile *fout = new TFile(outname,"recreate");
  treeMPPC->Write();
  fout->Close(); //([iv]ファイルへの書き出し)

  return;
}
